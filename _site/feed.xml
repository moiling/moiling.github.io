<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MOI</title>
    <description>THE MOI'S WORLD</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 21 Apr 2019 14:38:20 +0000</pubDate>
    <lastBuildDate>Sun, 21 Apr 2019 14:38:20 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Thoughts on PDMS</title>
        <description>&lt;h2 id=&quot;首先&quot;&gt;首先&lt;/h2&gt;

&lt;p&gt;虽然现在为读不懂另一篇论文而急得抓耳挠腮，但如果再不把对&lt;a href=&quot;/2019/04/11/PDMS4IM/&quot;&gt;上一篇&lt;/a&gt;的思考记下来我就忘掉了啊！&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;最终产物&quot;&gt;最终产物&lt;/h2&gt;

&lt;p&gt;在前文中介绍了，Image Matting(抠图)的最终产物是「&lt;strong&gt;Alpha mattes&lt;/strong&gt;」而不是一张抠出来的彩色前景图。因为Image Matting关心的并不是得到图片，而是得到&lt;strong&gt;前景和背景的关系&lt;/strong&gt;，也就是每个像素中&lt;strong&gt;前景颜色&lt;/strong&gt;所占比例，即「&lt;strong&gt;透明度&lt;/strong&gt;」。&lt;br /&gt;
&lt;br /&gt;
不知道有没有和我一样喜欢数码绘的朋友发现了一个问题，在不同混合模式下，每个颜色通道的混合比例是不同的。而我们再重新看到公式一:&lt;br /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I_{i} = \alpha F_{i} + (1-\alpha) B_{i}&lt;/script&gt;

&lt;p&gt;这里的 \(\alpha\) 可是一个&lt;strong&gt;标量&lt;/strong&gt;啊！多个通道使用了同一个  \(\alpha\) ，这样抠出来的图怎么能行呢？而且我只得到了一个透明度贴图(Alpha mattes)啊，直接进行混合的话，怎么可能把原图抠出来呢？(哈哈，听不懂我在说什么吧，我也听不懂，我们看图说话吧！)&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;问题一难道-alpha-不应该是个矢量吗&quot;&gt;问题一：难道 \(\alpha\) 不应该是个矢量吗？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ToPSMS-20190421/00.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，在不同的混合模式下(上为Darken，下为Mutiply)，中间的混合区域颜色是不同的，也就是说，每个颜色通道的混合比例是不同的，对于每个颜色通道，应该有一个自己的 \(\alpha\) ，所以 \(\alpha\) 难道不应该是&lt;strong&gt;矢量&lt;/strong&gt;吗？&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;问题二我有一个-alpha-mattes-了我怎么得到前景图呢&quot;&gt;问题二：我有一个 Alpha mattes 了，我怎么得到前景图呢？&lt;/h3&gt;

&lt;p&gt;比如我现在想要把如下图中的红色圆给抠出来
&lt;img src=&quot;/img/in-post/ToPSMS-20190421/01.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过计算我得到了一个Alpha mattes如下
&lt;img src=&quot;/img/in-post/ToPSMS-20190421/02.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将两者按照透明度混合的话，我将得到如下的图
&lt;img src=&quot;/img/in-post/ToPSMS-20190421/03.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;啥？？？我要的才不是这个，中间的紫色是怎么回事？完全没有把蓝色通道给去掉啊！所以其实还是问题一， \(\alpha\) 真的不应该是一个标量吗？要得到的图其实应该是如下图的(咦，这不是Foreo Luna吗？)
&lt;img src=&quot;/img/in-post/ToPSMS-20190421/04.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解答&quot;&gt;解答&lt;/h3&gt;

&lt;p&gt;嗯，其实最终还是我错了，问了师兄才知道，是我领域没搞清楚。Image Matting要解决的问题只有一个，那就是「&lt;strong&gt;前景占整个图片的透明度&lt;/strong&gt;」。而生产以上的图片，是「图像合成」领域要解决的事情。就拿上面的例子来说，如果要抠出最后的那张图，所要的输入不只是「Alpha mattes」还有一个很重要的就是在「Sample Pair Selection」中取样得到的「&lt;strong&gt;前景色&lt;/strong&gt;」。两者混合就可以得到了，同理每个通道的考虑也应该是「图像合成」要做的事。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Image matting refers to the soft extraction of foreground objects from a color image by estimating the opacity of each pixel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我觉得……我确实有点太跳跃了，应该完善一下基础才行。&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;公式二&quot;&gt;公式二&lt;/h2&gt;

&lt;p&gt;公式二的推导费了我很大功夫，有一个主要原因是论文中的公式二居然，写！错！了！&lt;br /&gt;
写成了&lt;script type=&quot;math/tex&quot;&gt;\hat{\alpha}=\frac{(I-B) \cdot(F-B)}{\left(\|F-B\|_{2}\right)}&lt;/script&gt;，而正确的应该是&lt;script type=&quot;math/tex&quot;&gt;\hat{\alpha}=\frac{(I-B) \cdot(F-B)}{\left(\|F-B\|_{2}\right)^{2}}&lt;/script&gt;，分母少了个平方啊！&lt;br /&gt;
但我认为这里的推导还是有东西讲的，其实公式二是由上面的公式一推导而来的，而且它计算的是一个「&lt;strong&gt;理想情况&lt;/strong&gt;」，这一点非常关键！由公式一很好推出一个结论：&lt;br /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
I &amp;= \alpha F + (1-\alpha) B \\
I-B &amp;= \alpha (F-B) \\
\alpha &amp;= \frac{\left\|I-B\right\|_{2}}{\left\|F-B\right\|_{2}}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;但这是有条件的，即向量I-B和向量F-B是「&lt;strong&gt;共线&lt;/strong&gt;」的即B、I、F共线，这就是刚刚说的「&lt;strong&gt;理想情况&lt;/strong&gt;」，而一般情况下，是不会共线的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ToPSMS-20190421/05.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以对于一般情况，我们就的计算 I 在 BF 上的「&lt;strong&gt;投影&lt;/strong&gt;」I’ 了，这样就推出公式二了&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\hat{\alpha} &amp;= \frac{\left\|I'-B\right\|_{2}}{\left\|F-B\right\|_{2}} \\
\hat{\alpha} &amp;= \frac{\left\|I-B\right\|_{2} \times\cos\theta }{\left\|F-B\right\|_{2}} \\
\hat{\alpha} &amp;= \frac{\frac{(I-B) \cdot(F-B)}{\left\|F-B\right\|_{2}}}{\left\|F-B\right\|_{2}} \\
\hat{\alpha} &amp;= \frac{(I-B) \cdot(F-B)}{\left(\|F-B\|_{2}\right)^{2}}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;评价函数&quot;&gt;评价函数&lt;/h2&gt;

&lt;p&gt;这里所说的评价函数是指对于颜色评价函数，其实之前不能理解就是因为没能理解到上面所说的「理想情况」。其实「理想情况」就是&lt;strong&gt;样本选取正确&lt;/strong&gt;的情况，共线时的误差为零。而 I 离得越远，和计算出来的 I’ 的误差就越大，复原的颜色误差就越大。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;O_{z}^{(c)}\left(x_{F}, x_{B}\right)=\exp \left(-\| C_{z}-\left(\hat{\alpha}_{z} C_{x_{P}}+\left(1-\hat{\alpha}_{z}\right) C_{x_{B}}\right)\right)\left\|_{2}\right)&lt;/script&gt;

&lt;p&gt;这里还有一个问题就是这个评价函数为什么不作为多目标计算时候的目标函数呢？那样在多目标选取的时候就已经可以排除掉不佳的答案了，是因为计算量太大了吗？&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;fdmo&quot;&gt;FDMO&lt;/h2&gt;

&lt;p&gt;在FDMO中，每次迭代如果找到了一个支配当前解的情况，就要和当前解交换，然后从头开始这次迭代。在某种情况下会重复很多次没必要的计算。我认为最差情况下每次迭代的最坏结果达到了\(O(n^2)\)，而不是文中所写的\(O(2(n-1-i)\)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ToPSMS-20190421/06.jpeg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 a &amp;gt; b 是 a Pareto Dominate b的意思。&lt;br /&gt;
而且如果其他剩余的元素(空心圆)也是形如这样，结构递归下去的话，最差的总时间复杂度达到了\(O(2^n)\)！当然这个情况在宇宙毁灭前都不一定能随机到。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp;(\frac{n}{2^1})^2+(\frac{n}{2^2})^2+(\frac{n}{2^3})^2+\ldots+(\frac{n}{2^{log(n)}})^2\\
&amp;= 1^2 + 2^2 + 4^2 + 8^2 + \ldots + (\frac{n}{2})^2\\
&amp;= 4^0 + 4^1 + 4^2 + 4^3 + \ldots + 4^{log(n)-1}\\
&amp;= \frac{4^{log(n)-1}-1}{3}\\
&amp;= O(4^{logn(n)})\\
&amp;= O(2^n)\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;所以我稍微改了一下程序，只要不要走那么多次回头路就可以了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i ← 1
j ← the number of elements in array C
while j &amp;lt;= j do
    cmp ← i + 1
    exchanged ← False
    while cmp &amp;lt;= j do
        if C[i] dominate C[cmp] then
            swap(C[cmp], C[j])
            j ← j - 1
        else if C[cmp] dominate C[i] then
            swap(C[i], C[cmp])
            swap(C[cmp], C[j])
            j ← j - 1
            cmp ← cmp + 1     // 继续走到底，交换到最优的解
            exchanged ← true  // 交换了表示要重走一次
        else
            cmp ← cmp + 1
        end if

        if cmp = j and exchanged then  // 如果到了最后看情况是否需要重复
            cmp ← i + 1
            exchanged ← False
        end if
    end while
    i ← i + 1
end while
return C, i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;如果还有什么想到的新问题，或者有误的地方会及时改正！先告一段落吧，有时间把问题模型整理一下，现在最主要的任务是解决问题模型呢。&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019/04/21/ToPDMS/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/21/ToPDMS/</guid>
        
        <category>CV</category>
        
        <category>MOP</category>
        
        <category>Reading</category>
        
        
      </item>
    
      <item>
        <title>PDMS for Image Matting</title>
        <description>&lt;h2 id=&quot;首先&quot;&gt;首先&lt;/h2&gt;

&lt;p&gt;终于完整地读完第一篇论文了！&lt;br /&gt;师兄关于抠图的论文《&lt;a href=&quot;https://ieeexplore.ieee.org/document/8660585&quot;&gt;Pixel-level Discrete Multiobjective Sampling for Image Matting&lt;/a&gt;》。&lt;br /&gt;师兄超Nice的，被无知的我穷追不舍（师兄好可怜），但我还是只能稍作了解。&lt;br /&gt;现记录如下，有理解错误和不足的地方会及时改正。:)&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;关于抠图&quot;&gt;关于抠图&lt;/h2&gt;

&lt;p&gt;「&lt;strong&gt;抠图&lt;/strong&gt;」的主要任务很简单，就是从一张图片中，把你需要的物体(前景)从图像中提取出来。其操作是通过评估每个像素点的透明度来完成的。&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Image matting refers to the soft extraction of foreground objects from a color image by estimating the opacity of
each pixel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;抠图方法&quot;&gt;抠图方法&lt;/h2&gt;

&lt;h3 id=&quot;一个重要公式&quot;&gt;一个重要公式&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I_{i} = \alpha F_{i} + (1-\alpha) B_{i}&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;I 为该像素由我们肉眼观察到的颜色 &lt;br /&gt;
F 为该像素对应的前景的颜色 &lt;br /&gt;
B 为该像素对应的背景的颜色 &lt;br /&gt;
i 表示通道，比如在RGB色域中就是R G B三个通道啦 &lt;br /&gt;
&lt;br /&gt;
其实就是一个颜色叠加，用 α 和 1-α 来表示前景/背景的透明度 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;抠图所需内容&quot;&gt;抠图所需内容&lt;/h3&gt;

&lt;p&gt;所需内容有 2 张图片：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;一张待抠图片（当然）&lt;/li&gt;
  &lt;li&gt;一张大致确定前景/背景位置的图片（Trimap or Scribble）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;trimap--scribble&quot;&gt;Trimap &amp;amp; Scribble&lt;/h4&gt;

&lt;p&gt;对于第 2 个，可能会比较陌生，但看下图就好理解了。其实就是一个用来划分区域的「&lt;strong&gt;三色图&lt;/strong&gt;」。&lt;br /&gt;
「&lt;strong&gt;黑色区域&lt;/strong&gt;」表示确定为「&lt;strong&gt;背景&lt;/strong&gt;」的区域；&lt;br /&gt;
「&lt;strong&gt;白色区域&lt;/strong&gt;」表示确定为「&lt;strong&gt;前景&lt;/strong&gt;」的区域；&lt;br /&gt;
「&lt;strong&gt;灰色区域&lt;/strong&gt;」表示「&lt;strong&gt;不确定&lt;/strong&gt;」的区域。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;而抠图算法的最终目的，就是消除这个不确定的区域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有「&lt;strong&gt;trimap&lt;/strong&gt;」和「&lt;strong&gt;scribble&lt;/strong&gt;」两种，trimap 比较精准，而 scribble 就是用户手画的随便指定了一下前景和背景区域。&lt;br /&gt;
当然后者更便于用户使用，但确定的区域少了，难度也随之增加了。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/PDMS4IM-20190411/01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;抠图的产物&quot;&gt;抠图的产物&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;这还用说吗！当然是抠出来的图啊！&lt;/del&gt;&lt;br /&gt;
&lt;strong&gt;注意了（敲黑板）&lt;/strong&gt;！这里可能会有人和我一样进入一个误区，认为抠图的最终产物是一张前景图。&lt;br /&gt;
其实不是的，抠图的产物是一个叫做「&lt;strong&gt;Alpha mattes&lt;/strong&gt;」的东西，如下图所示。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/PDMS4IM-20190411/02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就是一个蒙版，每个像素的灰度值代表透明度。&lt;br /&gt;
「&lt;strong&gt;黑色&lt;/strong&gt;」代表该像素透明度为 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;；&lt;br /&gt;
「&lt;strong&gt;白色&lt;/strong&gt;」代卖该像素透明度为 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;；&lt;br /&gt;
「&lt;strong&gt;灰色&lt;/strong&gt;」按照灰度确定该像素的透明度。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;有了这个 Alpha mattes 我们就已经把前景给提取出来了。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;至于所说的前景图，师兄说那是「图像合成」的事了。&lt;br /&gt;
而且，如果用于图像合成的话，不仅仅需要生成一个 Alpha mattes 还需要一个「F」，即一个前景色的图！&lt;br /&gt;
&lt;br /&gt;
为什么呢？我放在最后「思考」中介绍吧，一直扩展还下不下课了！喂喂！&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;现有方法&quot;&gt;现有方法&lt;/h3&gt;

&lt;p&gt;现主要抠图算法都基于以下 3 种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于采样算法 Sampling-Based&lt;/li&gt;
  &lt;li&gt;基于遗传算法 Propagation-Based&lt;/li&gt;
  &lt;li&gt;以上两者混合 Hybrid Methods&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;该论文的做法是基于采样的，所以比较详细说明了采样。&lt;br /&gt;
其他两种我的脑子告诉我它不会，等我喂饱它之后再来补充。&lt;/p&gt;

&lt;h3 id=&quot;基于采样方法&quot;&gt;基于采样方法&lt;/h3&gt;

&lt;p&gt;基于采样的方法又分为了「&lt;strong&gt;参数型 Parametric&lt;/strong&gt;」和「&lt;strong&gt;无参型 Non-Parametric&lt;/strong&gt;」两种。&lt;br /&gt;
先说结论，该论文用的是「无参型」。&lt;/p&gt;

&lt;h4 id=&quot;parametric&quot;&gt;Parametric&lt;/h4&gt;

&lt;p&gt;和该论文实现无关，贴上原文观摩观摩就好啦。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;In parametric methods, pixel colors are assumed to obey a specific distribution, and the distribution parameters are estimated from the pixels in known regions. Alpha values are estimated according to the distance between the color of the unknown pixel and the color distribution of known regions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;non-parametric&quot;&gt;Non-Parametric&lt;/h4&gt;

&lt;p&gt;这方法就是说呢，从之前的「Trimap」或「Scribble」里得到已知的「前景区域」和「背景区域」。&lt;br /&gt;
对于某一未知区域的像素点，从以上两个确定区域中选取一对像素作为样本，即得到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; ，再加上该未知区域像素的 &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; 就可以通过上面的「重要公式」求出 &lt;code class=&quot;highlighter-rouge&quot;&gt;α&lt;/code&gt; 了。&lt;br /&gt;
最后判断这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;α&lt;/code&gt; 是否符合标准就好（什么标准啊，你话不要说一半啊！）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In non-parametric methods, foreground and background color samples are obtained from known regions, whereby an objective function is used to find an optimal pair of foreground and background samples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;计算-α-的公式&quot;&gt;计算 α 的公式&lt;/h4&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{\alpha}=\frac{(I-B) \cdot(F-B)}{\left(\|F-B\|_{2}\right)^{2}}&lt;/script&gt;

&lt;p&gt;该公式是由以上「重要公式」推导出来的，有多个颜色通道，所以这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 均为向量。&lt;br /&gt;
其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;‖*‖₂&lt;/code&gt; 为&lt;a href=&quot;https://en.wikipedia.org/wiki/Norm_(mathematics)#Euclidean_norm&quot;&gt;欧几里德范数&lt;/a&gt;，在这里就和「模」差不多。&lt;br /&gt;
&lt;br /&gt;
推导过程在「思考」部分，这里和后面的内容有关联，是我之前困惑的地方，所以想着重说明一下。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;流程&quot;&gt;流程&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/PDMS4IM-20190411/03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pre-Processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;预处理阶段，主要是通过一些算法来缩小「Trimap」或「Scribble」中「未知区域」的空间，减少之后的计算量。比如使用一些颜色相近和空间相近原则，来扩张已确定的「前景区域」和「背景区域」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Color Sampling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前景色和背景色的取样阶段。第二个公式中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 并不是大海捞针，每一个都测试一遍的。而是从一堆可行解里面选择，这堆可行解就是通过「Color Sampling」过程筛选出来的。&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这个阶段就是本文重点优化的阶段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. Sample Pair Selection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从上一个步骤中根据目标函数选取最佳的样本，也就是公式中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Solving Alpha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将上一步得到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 带入第二个公式求出 &lt;code class=&quot;highlighter-rouge&quot;&gt;α&lt;/code&gt; ，从而得到「Alpha mattes」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Post-Processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;后处理阶段，通过一些算法使得「Alpha mattes」的图像更加平滑。&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;现有方法的不足之处&quot;&gt;现有方法的不足之处&lt;/h2&gt;

&lt;p&gt;不足之处主要在于「Color Sampling」阶段。如上面所说抠图主要运用「第二个公式」的 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 求出 &lt;code class=&quot;highlighter-rouge&quot;&gt;α&lt;/code&gt; 进而得到最终产物「Alpha mattes」，&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 都要从候选样本中选取，所以该阶段是整个抠图过程的关键。&lt;/p&gt;

&lt;h3 id=&quot;color-sampling-的困难点&quot;&gt;Color Sampling 的困难点&lt;/h3&gt;

&lt;p&gt;「Color Sampling」阶段的困难主要在于两点，「&lt;strong&gt;取样标准选取&lt;/strong&gt;」和「&lt;strong&gt;取样集合太大&lt;/strong&gt;」的问题。&lt;/p&gt;

&lt;h3 id=&quot;已有的解决方法&quot;&gt;已有的解决方法&lt;/h3&gt;

&lt;p&gt;对于「取样标准选取」的解决方法，最早提出的是一种「基于距离的取样方法」，即样本应该离未知点越近越好，这样的话选取的样本一般都集中在未知点到已知区域的边界处。但是很遗憾，通常正确的样本并不一定离未知点很近，所以需要多种标准来选择，比如「&lt;strong&gt;距离&lt;/strong&gt;」、「&lt;strong&gt;颜色&lt;/strong&gt;」、「&lt;strong&gt;纹理&lt;/strong&gt;」等。所以提出了「&lt;strong&gt;基于多种标准的取样方法&lt;/strong&gt;」&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;对于「取样集合太大」的解决方法，通常采用叫做「&lt;a href=&quot;https://arxiv.org/abs/1612.01601&quot;&gt;Superpixels&lt;/a&gt;」的方法。简单来说就是把很多颜色相近的像素点聚集起来成为一个「超像素」，这个「超像素」中只有一个颜色，就是之前聚集的像素点的「&lt;strong&gt;颜色均值&lt;/strong&gt;」。这样就大大减少了取样集合的大小。&lt;/p&gt;

&lt;h3 id=&quot;不足之处&quot;&gt;不足之处&lt;/h3&gt;

&lt;p&gt;对于「基于多种标准的取样方法」来说，主要的问题在于「&lt;strong&gt;多种标准之间的冲突问题&lt;/strong&gt;」，如一个正确的样本，它的颜色和未知点很近，但是距离却和未知点很远，这样标准之间就产生了冲突，很可能将正确的点给抛弃掉。从而产生「&lt;strong&gt;丢失正确样本 Missing True Samples（MTS）&lt;/strong&gt;」的问题。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For example, if true color samples sembled to the color of an unknown pixel are far from the unknown pixel, the spatial closeness criterion and color criterion will be in conflict. The true samples may not be collected by existing methods in this case, because the dissatisfaction of spatial closeness criterion may result in uncompetitive scores for the true samples in the comparison to that for the pixels closed to unknown pixels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于「Superpixels」来说，也一样的，可能正确的样本颜色被均值化，从而产生「MTS」问题。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The mean color of a superpixel cannot represent the color outliers in the superpixel which may be the true color sample for alpha estimation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;改进方法&quot;&gt;改进方法&lt;/h2&gt;

&lt;p&gt;该论文提出的「&lt;strong&gt;Pixel-level Discrete Multiobjective Sampling（PDMS）&lt;/strong&gt;」算法主要就是为了避免「MTS」问题。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;多目标优化&quot;&gt;多目标优化&lt;/h3&gt;

&lt;p&gt;对于「多种标准之间的冲突问题」，将其看做「&lt;strong&gt;多目标优化问题 Multiobjective Optimization Problem (MOP)&lt;/strong&gt;」，从而解决标准之间的冲突。目标函数如下：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} g_{1}(x) &amp;=\left\|C_{x}-C_{z}\right\|_{2} \\ g_{2}(x) &amp;=\left\|S_{x}-S_{z}\right\|_{2} \\ g_{3}(x) &amp;=\left\|T_{x}-T_{z}\right\|_{2} \end{aligned} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;其中\(g_{1}(x)\)、\(g_{2}(x)\)、\(g_{3}(x)\)为三个目标函数&lt;br /&gt;
\(x\)为已知区域中的某个点，\(z\)为当前计算的未知区域点&lt;br /&gt;
\(C\)为颜色向量、\(S\)为空间坐标向量、\(T\)为纹理特征向量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同时使所有目标函数最小化&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min g_{1}(x),\min g_{2}(x),\ldots,\min g_{n}(x)&lt;/script&gt;

&lt;p&gt;注意这里只是一个样本点的选取，在「Color Sampling」过程中是要选取 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 两个样本点的，所以该问题其实是&lt;strong&gt;两个&lt;/strong&gt;「MOP」问题。&lt;/p&gt;

&lt;h3 id=&quot;pixel-level&quot;&gt;Pixel-Level&lt;/h3&gt;

&lt;p&gt;对于「Superpixels」的问题，想法很简单，既然均值化会丢失真实样本，那不均值化好了，直接从所有像素中取样，即「Pixel-Level」。但「取样集合太大」的问题不又回来了吗，进入死循环中。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这个时候就需要跳出固定思维了，本文通过设计了一个新的算法「&lt;strong&gt;Fast Discrete Multiobjective Optimization（FDMO）&lt;/strong&gt;」从而避免了「取样集合太大」导致的「计算量过大问题」。&lt;/p&gt;

&lt;h4 id=&quot;fdmo&quot;&gt;FDMO&lt;/h4&gt;

&lt;p&gt;「FDMO」的主要优化依据在于，经过「MOP」筛选之后，候选样本集所在的「Pareto Optimal Solution」很小很小。在 &lt;code class=&quot;highlighter-rouge&quot;&gt;168,409&lt;/code&gt; 个可行解中最后只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;11&lt;/code&gt; 在「Pareto Set」中。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For the foreground sampling MOP defined in Subsection III-A2, the universal set contains 168,409 feasible solutions while only 11 solutions are Pareto optimal in this case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这样的情况下，算法的核心思想就是&lt;strong&gt;在每一趟遍历中，把所有该剔除（被支配）的样本给剔除掉&lt;/strong&gt;。这样如果最终「Pareto Optimal Solution」的大小为 &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;，就只需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; 趟遍历中完成算法。设取样集合总大小为 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 则算法的时间复杂度为 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(kn)&lt;/code&gt; 。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 *  Input: all possible values C.
 *  Output: C, i (the first i − 1 elements in array C are Pareto optimal)
 */
i ← 1
j ← the number of elements in array C
while i ≤ j do 
    cmp ← i + 1
    while cmp ≤ j do
        if C[i] dominate C[cmp] then
            swap(C[cmp], C[j])
            j ← j − 1
        else if C[cmp] dominate C[i] then
            swap(C[i], C[cmp])
            swap(C[cmp], C[j])
            j ← j − 1
            cmp ← i + 1
        else
            cmp ← cmp + 1
        end if
    end while
    i ← i + 1
end while
return C, i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Best&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Worst&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Average&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;时间复杂度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(n)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(n^2)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(kn)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;空间复杂度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(n)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(n)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(n)\)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;选取样本对的方法&quot;&gt;选取样本对的方法&lt;/h2&gt;

&lt;p&gt;也就是「Sample Pair Selection」阶段，在上一阶段中得到的候选样本里选取最佳样本。&lt;br /&gt;
其评价方程如下：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
O_{z}\left(x_{F}, x_{B}\right)&amp;=O_{z}^{(c)}\left(x_{F}, x_{B}\right) \times O_{z}^{(s)}\left(x_{F}, x_{B}\right)
\\
\\
O_{z}^{(c)}\left(x_{F}, x_{B}\right)&amp;=\exp \left(-\| C_{z}-\left(\hat{\alpha}_{z} C_{x_{P}}+\left(1-\hat{\alpha}_{z}\right) C_{x_{B}}\right)\right)\left\|_{2}\right)
\\
O_{z}^{(s)}\left(x_{F}, x_{B}\right)&amp;=\exp \left(\frac{-\left\|S_{z}-S_{x_{F}}\right\|_{2}}{\frac{1}{\left|\Omega_{F}\right|} \sum_{x_{i} \in \Omega_{F}}\left\|S_{z}-S_{x_{i}}\right\|_{2}}\right) \times \exp \left(\frac{-\left\|S_{z}-S_{x_{B}}\right\|_{2}}{\frac{1}{\left|\Omega_{B}\right|} \sum_{x_{i} \in \Omega_{B}}\left\|S_{z}-S_{x_{i}}\right\|_{2}}\right)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;是不是头都要炸了？哈哈哈&lt;br /&gt;
静下心来，其实很简单&lt;br /&gt;
第二个公式的意思就是用算出来的 alpha、B 和 F&lt;br /&gt;
反过来求 I’ ，看看这个 I’ 的颜色有多大变化，变化越小越好&lt;br /&gt;
第三个公式的意思就是 F 和 B 应该是所有样本里距离最近的&lt;br /&gt;
第一个公式就是这两者的叉乘，两者一起评估&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;结论--思考&quot;&gt;结论 &amp;amp; 思考&lt;/h2&gt;

&lt;p&gt;结论就是该算法最终在「&lt;strong&gt;很少的候选样本&lt;/strong&gt;」中达到了「&lt;strong&gt;很小的 Alpha 误差&lt;/strong&gt;」。&lt;br /&gt;
但是速度方面不尽人意，空间方面耗费很小。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;思考主要想说一下自己之前对「最终产物」的误解，以及「前景图」生成过程。&lt;br /&gt;
还有「第二个公式」的推导过程（因为论文中少了一个平方，困扰了我很久），以及选择样本对时「目标函数」的作用。
最后是「FDMO」算法在我想的一个特殊情况下时间复杂度达到了\(O(2^n)\)，以及我的改进方法。&lt;br /&gt;
由于篇幅太长了，我自己都不愿看了，这些内容就放到下一篇吧（让我偷个懒）。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019/04/11/PDMS4IM/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/11/PDMS4IM/</guid>
        
        <category>CV</category>
        
        <category>MOP</category>
        
        <category>Reading</category>
        
        
      </item>
    
      <item>
        <title>Hello World!</title>
        <description>&lt;h2 id=&quot;先说原因&quot;&gt;先说原因&lt;/h2&gt;
&lt;p&gt;最近总算是把考试给结束掉了，要开启新的学习篇章了，把学习的艰难过程做一个记录吧！&lt;br /&gt;
&lt;br /&gt;
这段时间面试备考，回顾了以前做过的项目和记录的学习笔记，感觉就是，“哇！我学了这么多东西吗！为什么没有好好地记录下来呢？”&lt;br /&gt;
&lt;br /&gt;
虽然很多过程看起来都很愚蠢，但都是成长的一部分啊，说不定还有其他的朋友和我一样往坑里跳！&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;再说内容&quot;&gt;再说内容&lt;/h2&gt;
&lt;p&gt;内容主要以我平时的学习记录为主，一些知识的总结，踩坑记录等等。&lt;br /&gt;
&lt;br /&gt;
有时间的话再聊聊一些生活上的事情，但多半我是懒得写的（笑）。&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019/04/09/Hello-World/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/09/Hello-World/</guid>
        
        <category>Life</category>
        
        
      </item>
    
  </channel>
</rss>
